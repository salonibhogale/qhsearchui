{"ast":null,"code":"/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assign = require('lodash/assign');\n/* jshint validthis: true */\n\n\nvar is = 'is-',\n    space = ' ',\n    settings = {\n  ns: '',\n  el: '__',\n  mod: '_',\n  modValue: '_',\n  classMap: {}\n};\n/**\n * Simplest mixin helper\n */\n\nfunction extend(target, obj) {\n  return Object.keys(obj).reduce(function (target, key) {\n    var value = obj[key]; // Shallow copy of array\n\n    if (Array.isArray(value)) {\n      value = value.slice();\n    }\n\n    target[key] = value;\n    return target;\n  }, target);\n}\n/**\n * Shallow copy helper\n */\n\n\nfunction copy(obj) {\n  return extend({}, obj);\n}\n/**\n * Converts object with classes to array of strings\n * Example: objectToArray({ color: 'red' }) -> ['', '_color_red']\n *\n * @param {Object} obj { name: 'value' } or { name1: true, name2: false }\n * @param {String} [separator='_'] Separator or prefix\n */\n\n\nfunction objectToArray(obj, separator) {\n  if (separator === undefined) {\n    separator = settings.mod;\n  }\n\n  var modValueSeparator = settings.modValue;\n  return Object.keys(obj).reduce(function (array, key) {\n    var value = obj[key];\n\n    if (!value) {\n      return array;\n    }\n\n    if (value === true) {\n      array.push(separator + key);\n    } else {\n      // Makes block__elem_{modifierKey}_{modifierValue}\n      array.push(separator + key + modValueSeparator + value);\n    }\n\n    return array;\n  }, []);\n}\n/**\n * Resolves real class name from classMap\n * @param {String} name\n * @returns {String}\n */\n\n\nfunction resolveClassName(name) {\n  return settings.classMap[name] || name;\n}\n/**\n * Callable block instance\n */\n\n\nfunction callableInstance() {\n  var args = Array.prototype.slice.call(arguments);\n  var context = copy(this);\n  context = args.reduce(function (context, argv) {\n    if (argv && typeof argv === 'string') {\n      context.name = context.name + settings.el + argv;\n    }\n\n    if (argv && typeof argv === 'object') {\n      context.mods.push(argv);\n    }\n\n    return context;\n  }, context);\n  return factory(context);\n}\n/**\n * Static method toString() for callable instance\n */\n\n\nfunction toString() {\n  // Add namespace\n  var name = settings.ns + this.name,\n      classList = resolveClassName(name); // Add modifiers\n\n  classList = this.mods.reduce(function (classList, modObject) {\n    var modArray = objectToArray(modObject);\n\n    if (modArray.length) {\n      modArray = modArray.map(function (mod) {\n        return resolveClassName(name + mod);\n      });\n      modArray.unshift('');\n      classList += modArray.join(space);\n    }\n\n    return classList;\n  }, classList); // Mix with another classes\n\n  if (this.mixes.length) {\n    classList += space + this.mixes.join(space);\n  } // Add states\n\n\n  var states = this.states;\n  classList = Object.keys(states).reduce(function (classList, state) {\n    return classList += states[state] ? space + is + state : '';\n  }, classList);\n  return classList;\n}\n\nfunction split() {\n  var classNames = toString.bind(this)();\n  return String.prototype.split.apply(classNames, arguments);\n}\n/**\n * Static method mix() for callable instance\n * @param {String|Array|Object} className 'class'; ['one', 'two']; {one: true, two: false}\n */\n\n\nfunction mix(className) {\n  var context = copy(this),\n      classes;\n\n  if (className) {\n    if (typeof className === 'function') {\n      classes = [className.toString()];\n    } else if (Array.isArray(className)) {\n      classes = className;\n    } else if (typeof className === 'object') {\n      classes = [className.toString()];\n    } else if (typeof className === 'string') {\n      classes = [className];\n    } else {\n      classes = objectToArray(className, '');\n    }\n\n    context.mixes = context.mixes.concat(classes);\n  }\n\n  return factory(context);\n}\n/**\n * Adds SMACSS-states: https://smacss.com/book/type-state\n * @param {Object} obj State object\n * @return {[type]} [description]\n */\n\n\nfunction state(obj) {\n  var context = copy(this),\n      states = copy(context.states);\n  extend(states, obj || {});\n  context.states = states;\n  return factory(context);\n}\n/**\n * Generator of block-functions\n * @param {Object} context Immutable context of current block\n * @return {Function}\n */\n\n\nfunction factory(context) {\n  context = extend({\n    name: '',\n    mods: [],\n    mixes: [],\n    states: {}\n  }, context || {}); // Whilst JavaScript can't create callable objects with constructors\n  // var b:any = callableInstance.bind(context);\n\n  var b = {};\n  b.el = callableInstance.bind(context);\n  b.mod = callableInstance.bind(context); // var b:any = {}\n\n  b.toString = toString.bind(context);\n  b.split = split.bind(context);\n  b.mix = mix.bind(context);\n  b.state = state.bind(context);\n  return b;\n}\n/**\n * Entry point\n * @param {String} name Block name\n * @return {Function}\n */\n\n\nfunction block(name) {\n  return factory({\n    name: name\n  });\n}\n\nexports.block = block;\n/**\n * Setup settings\n */\n\nassign(block, {\n  setup: function (obj) {\n    extend(settings, obj || {});\n    return block;\n  }\n});","map":{"version":3,"sources":["../../../src/core/react/block.ts"],"names":[],"mappings":"AAAA;;;;;AAEA,IAAM,MAAM,GAAG,OAAO,CAAC,eAAD,CAAtB;AACA;;;AAEA,IAAM,EAAE,GAAG,KAAX;AAAA,IACE,KAAK,GAAG,GADV;AAAA,IAEE,QAAQ,GAAG;AACT,EAAA,EAAE,EAAE,EADK;AAET,EAAA,EAAE,EAAE,IAFK;AAGT,EAAA,GAAG,EAAE,GAHI;AAIT,EAAA,QAAQ,EAAE,GAJD;AAKT,EAAA,QAAQ,EAAE;AALD,CAFb;AAUA;;;;AAGA,SAAS,MAAT,CAAgB,MAAhB,EAAwB,GAAxB,EAA2B;AACzB,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,MAAjB,CAAwB,UAAS,MAAT,EAAiB,GAAjB,EAAoB;AACjD,QAAI,KAAK,GAAG,GAAG,CAAC,GAAD,CAAf,CADiD,CAGjD;;AACA,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,MAAA,KAAK,GAAG,KAAK,CAAC,KAAN,EAAR;AACD;;AAED,IAAA,MAAM,CAAC,GAAD,CAAN,GAAc,KAAd;AACA,WAAO,MAAP;AACD,GAVM,EAUJ,MAVI,CAAP;AAWD;AAED;;;;;AAGA,SAAS,IAAT,CAAc,GAAd,EAAiB;AACf,SAAO,MAAM,CAAC,EAAD,EAAK,GAAL,CAAb;AACD;AAED;;;;;;;;;AAOA,SAAS,aAAT,CAAuB,GAAvB,EAA4B,SAA5B,EAAsC;AACpC,MAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,IAAA,SAAS,GAAG,QAAQ,CAAC,GAArB;AACD;;AAED,MAAM,iBAAiB,GAAG,QAAQ,CAAC,QAAnC;AAEA,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,MAAjB,CAAwB,UAAS,KAAT,EAAgB,GAAhB,EAAmB;AAChD,QAAM,KAAK,GAAG,GAAG,CAAC,GAAD,CAAjB;;AAEA,QAAI,CAAC,KAAL,EAAY;AACV,aAAO,KAAP;AACD;;AAED,QAAI,KAAK,KAAK,IAAd,EAAoB;AAClB,MAAA,KAAK,CAAC,IAAN,CAAW,SAAS,GAAG,GAAvB;AACD,KAFD,MAEO;AACL;AACA,MAAA,KAAK,CAAC,IAAN,CAAW,SAAS,GAAG,GAAZ,GAAkB,iBAAlB,GAAsC,KAAjD;AACD;;AAED,WAAO,KAAP;AACD,GAfM,EAeJ,EAfI,CAAP;AAgBD;AAED;;;;;;;AAKA,SAAS,gBAAT,CAA0B,IAA1B,EAA8B;AAC5B,SAAO,QAAQ,CAAC,QAAT,CAAkB,IAAlB,KAA2B,IAAlC;AACD;AAED;;;;;AAGA,SAAS,gBAAT,GAAyB;AACvB,MAAM,IAAI,GAAG,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,CAAb;AACA,MAAI,OAAO,GAAG,IAAI,CAAC,IAAD,CAAlB;AAEA,EAAA,OAAO,GAAG,IAAI,CAAC,MAAL,CAAY,UAAS,OAAT,EAAkB,IAAlB,EAAsB;AAC1C,QAAI,IAAI,IAAI,OAAO,IAAP,KAAgB,QAA5B,EAAsC;AACpC,MAAA,OAAO,CAAC,IAAR,GAAe,OAAO,CAAC,IAAR,GAAe,QAAQ,CAAC,EAAxB,GAA6B,IAA5C;AACD;;AAED,QAAI,IAAI,IAAI,OAAO,IAAP,KAAgB,QAA5B,EAAsC;AACpC,MAAA,OAAO,CAAC,IAAR,CAAa,IAAb,CAAkB,IAAlB;AACD;;AAED,WAAO,OAAP;AACD,GAVS,EAUP,OAVO,CAAV;AAYA,SAAO,OAAO,CAAC,OAAD,CAAd;AACD;AAED;;;;;AAGA,SAAS,QAAT,GAAiB;AACf;AACA,MAAI,IAAI,GAAG,QAAQ,CAAC,EAAT,GAAc,KAAK,IAA9B;AAAA,MACE,SAAS,GAAG,gBAAgB,CAAC,IAAD,CAD9B,CAFe,CAKf;;AACA,EAAA,SAAS,GAAG,KAAK,IAAL,CAAU,MAAV,CAAiB,UAAS,SAAT,EAAoB,SAApB,EAA6B;AACxD,QAAI,QAAQ,GAAG,aAAa,CAAC,SAAD,CAA5B;;AAEA,QAAI,QAAQ,CAAC,MAAb,EAAqB;AACnB,MAAA,QAAQ,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAS,GAAT,EAAY;AAClC,eAAO,gBAAgB,CAAC,IAAI,GAAG,GAAR,CAAvB;AACD,OAFU,CAAX;AAIA,MAAA,QAAQ,CAAC,OAAT,CAAiB,EAAjB;AACA,MAAA,SAAS,IAAI,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAb;AACD;;AAED,WAAO,SAAP;AACD,GAbW,EAaT,SAbS,CAAZ,CANe,CAqBf;;AACA,MAAI,KAAK,KAAL,CAAW,MAAf,EAAuB;AACrB,IAAA,SAAS,IAAI,KAAK,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,KAAhB,CAArB;AACD,GAxBc,CA0Bf;;;AACA,MAAM,MAAM,GAAG,KAAK,MAApB;AACA,EAAA,SAAS,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,CAA2B,UAAS,SAAT,EAAoB,KAApB,EAAyB;AAC9D,WAAQ,SAAS,IAAI,MAAM,CAAC,KAAD,CAAN,GAAgB,KAAK,GAAG,EAAR,GAAa,KAA7B,GAAqC,EAA1D;AACD,GAFW,EAET,SAFS,CAAZ;AAIA,SAAO,SAAP;AACD;;AAED,SAAS,KAAT,GAAc;AACZ,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAT,CAAc,IAAd,GAAnB;AACA,SAAO,MAAM,CAAC,SAAP,CAAiB,KAAjB,CAAuB,KAAvB,CAA6B,UAA7B,EAAyC,SAAzC,CAAP;AACD;AAED;;;;;;AAIA,SAAS,GAAT,CAAa,SAAb,EAAsB;AACpB,MAAI,OAAO,GAAG,IAAI,CAAC,IAAD,CAAlB;AAAA,MACE,OADF;;AAGA,MAAI,SAAJ,EAAe;AACb,QAAI,OAAO,SAAP,KAAqB,UAAzB,EAAqC;AACnC,MAAA,OAAO,GAAG,CAAC,SAAS,CAAC,QAAV,EAAD,CAAV;AACD,KAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,SAAd,CAAJ,EAA8B;AACnC,MAAA,OAAO,GAAG,SAAV;AACD,KAFM,MAEA,IAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACxC,MAAA,OAAO,GAAG,CAAC,SAAS,CAAC,QAAV,EAAD,CAAV;AACD,KAFM,MAEA,IAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACxC,MAAA,OAAO,GAAG,CAAC,SAAD,CAAV;AACD,KAFM,MAEA;AACL,MAAA,OAAO,GAAG,aAAa,CAAC,SAAD,EAAY,EAAZ,CAAvB;AACD;;AACD,IAAA,OAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,KAAR,CAAc,MAAd,CAAqB,OAArB,CAAhB;AACD;;AAED,SAAO,OAAO,CAAC,OAAD,CAAd;AACD;AAED;;;;;;;AAKA,SAAS,KAAT,CAAe,GAAf,EAAkB;AAChB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAD,CAApB;AAAA,MACE,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAT,CADf;AAGA,EAAA,MAAM,CAAC,MAAD,EAAS,GAAG,IAAI,EAAhB,CAAN;AACA,EAAA,OAAO,CAAC,MAAR,GAAiB,MAAjB;AAEA,SAAO,OAAO,CAAC,OAAD,CAAd;AACD;AAED;;;;;;;AAKA,SAAS,OAAT,CAAiB,OAAjB,EAAwB;AACtB,EAAA,OAAO,GAAG,MAAM,CACd;AACE,IAAA,IAAI,EAAE,EADR;AAEE,IAAA,IAAI,EAAE,EAFR;AAGE,IAAA,KAAK,EAAE,EAHT;AAIE,IAAA,MAAM,EAAE;AAJV,GADc,EAOd,OAAO,IAAI,EAPG,CAAhB,CADsB,CAWtB;AACA;;AACA,MAAM,CAAC,GAAQ,EAAf;AACA,EAAA,CAAC,CAAC,EAAF,GAAO,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB,CAAP;AACA,EAAA,CAAC,CAAC,GAAF,GAAQ,gBAAgB,CAAC,IAAjB,CAAsB,OAAtB,CAAR,CAfsB,CAgBtB;;AACA,EAAA,CAAC,CAAC,QAAF,GAAa,QAAQ,CAAC,IAAT,CAAc,OAAd,CAAb;AACA,EAAA,CAAC,CAAC,KAAF,GAAU,KAAK,CAAC,IAAN,CAAW,OAAX,CAAV;AACA,EAAA,CAAC,CAAC,GAAF,GAAQ,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAR;AACA,EAAA,CAAC,CAAC,KAAF,GAAU,KAAK,CAAC,IAAN,CAAW,OAAX,CAAV;AAEA,SAAO,CAAP;AACD;AAED;;;;;;;AAKA,SAAgB,KAAhB,CAAsB,IAAtB,EAA2B;AACzB,SAAO,OAAO,CAAC;AAAE,IAAA,IAAI,EAAE;AAAR,GAAD,CAAd;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA;AAGA;;;;AAGA,MAAM,CAAC,KAAD,EAAQ;AACZ,EAAA,KAAK,EAAE,UAAS,GAAT,EAAY;AACjB,IAAA,MAAM,CAAC,QAAD,EAAW,GAAG,IAAI,EAAlB,CAAN;AACA,WAAO,KAAP;AACD;AAJW,CAAR,CAAN","sourceRoot":"","sourcesContent":["/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assign = require('lodash/assign');\n/* jshint validthis: true */\nvar is = 'is-', space = ' ', settings = {\n    ns: '',\n    el: '__',\n    mod: '_',\n    modValue: '_',\n    classMap: {}\n};\n/**\n * Simplest mixin helper\n */\nfunction extend(target, obj) {\n    return Object.keys(obj).reduce(function (target, key) {\n        var value = obj[key];\n        // Shallow copy of array\n        if (Array.isArray(value)) {\n            value = value.slice();\n        }\n        target[key] = value;\n        return target;\n    }, target);\n}\n/**\n * Shallow copy helper\n */\nfunction copy(obj) {\n    return extend({}, obj);\n}\n/**\n * Converts object with classes to array of strings\n * Example: objectToArray({ color: 'red' }) -> ['', '_color_red']\n *\n * @param {Object} obj { name: 'value' } or { name1: true, name2: false }\n * @param {String} [separator='_'] Separator or prefix\n */\nfunction objectToArray(obj, separator) {\n    if (separator === undefined) {\n        separator = settings.mod;\n    }\n    var modValueSeparator = settings.modValue;\n    return Object.keys(obj).reduce(function (array, key) {\n        var value = obj[key];\n        if (!value) {\n            return array;\n        }\n        if (value === true) {\n            array.push(separator + key);\n        }\n        else {\n            // Makes block__elem_{modifierKey}_{modifierValue}\n            array.push(separator + key + modValueSeparator + value);\n        }\n        return array;\n    }, []);\n}\n/**\n * Resolves real class name from classMap\n * @param {String} name\n * @returns {String}\n */\nfunction resolveClassName(name) {\n    return settings.classMap[name] || name;\n}\n/**\n * Callable block instance\n */\nfunction callableInstance() {\n    var args = Array.prototype.slice.call(arguments);\n    var context = copy(this);\n    context = args.reduce(function (context, argv) {\n        if (argv && typeof argv === 'string') {\n            context.name = context.name + settings.el + argv;\n        }\n        if (argv && typeof argv === 'object') {\n            context.mods.push(argv);\n        }\n        return context;\n    }, context);\n    return factory(context);\n}\n/**\n * Static method toString() for callable instance\n */\nfunction toString() {\n    // Add namespace\n    var name = settings.ns + this.name, classList = resolveClassName(name);\n    // Add modifiers\n    classList = this.mods.reduce(function (classList, modObject) {\n        var modArray = objectToArray(modObject);\n        if (modArray.length) {\n            modArray = modArray.map(function (mod) {\n                return resolveClassName(name + mod);\n            });\n            modArray.unshift('');\n            classList += modArray.join(space);\n        }\n        return classList;\n    }, classList);\n    // Mix with another classes\n    if (this.mixes.length) {\n        classList += space + this.mixes.join(space);\n    }\n    // Add states\n    var states = this.states;\n    classList = Object.keys(states).reduce(function (classList, state) {\n        return (classList += states[state] ? space + is + state : '');\n    }, classList);\n    return classList;\n}\nfunction split() {\n    var classNames = toString.bind(this)();\n    return String.prototype.split.apply(classNames, arguments);\n}\n/**\n * Static method mix() for callable instance\n * @param {String|Array|Object} className 'class'; ['one', 'two']; {one: true, two: false}\n */\nfunction mix(className) {\n    var context = copy(this), classes;\n    if (className) {\n        if (typeof className === 'function') {\n            classes = [className.toString()];\n        }\n        else if (Array.isArray(className)) {\n            classes = className;\n        }\n        else if (typeof className === 'object') {\n            classes = [className.toString()];\n        }\n        else if (typeof className === 'string') {\n            classes = [className];\n        }\n        else {\n            classes = objectToArray(className, '');\n        }\n        context.mixes = context.mixes.concat(classes);\n    }\n    return factory(context);\n}\n/**\n * Adds SMACSS-states: https://smacss.com/book/type-state\n * @param {Object} obj State object\n * @return {[type]} [description]\n */\nfunction state(obj) {\n    var context = copy(this), states = copy(context.states);\n    extend(states, obj || {});\n    context.states = states;\n    return factory(context);\n}\n/**\n * Generator of block-functions\n * @param {Object} context Immutable context of current block\n * @return {Function}\n */\nfunction factory(context) {\n    context = extend({\n        name: '',\n        mods: [],\n        mixes: [],\n        states: {}\n    }, context || {});\n    // Whilst JavaScript can't create callable objects with constructors\n    // var b:any = callableInstance.bind(context);\n    var b = {};\n    b.el = callableInstance.bind(context);\n    b.mod = callableInstance.bind(context);\n    // var b:any = {}\n    b.toString = toString.bind(context);\n    b.split = split.bind(context);\n    b.mix = mix.bind(context);\n    b.state = state.bind(context);\n    return b;\n}\n/**\n * Entry point\n * @param {String} name Block name\n * @return {Function}\n */\nfunction block(name) {\n    return factory({ name: name });\n}\nexports.block = block;\n/**\n * Setup settings\n */\nassign(block, {\n    setup: function (obj) {\n        extend(settings, obj || {});\n        return block;\n    }\n});\n//# sourceMappingURL=block.js.map"]},"metadata":{},"sourceType":"script"}