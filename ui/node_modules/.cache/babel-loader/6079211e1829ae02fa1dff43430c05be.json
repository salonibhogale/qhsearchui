{"ast":null,"code":"/**\n * Simple JSON serializer\n * @type {[type]}\n */\nmodule.exports = Json;\n\nvar _ = require('lodash');\n\nfunction Json() {}\n/**\n * Converts a value into a string, or an error\n * @param  {*} val - Any value, methods are stripped and\n * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify about other params\n * @return {String|Error} - A string is always returned, unless an error occured. then it will be that error.\n */\n\n\nJson.prototype.serialize = function (val, replacer, spaces) {\n  switch (typeof val) {\n    case 'string':\n      return val;\n\n    case 'object':\n      if (val) {\n        if (replacer || spaces) {\n          return JSON.stringify(val, replacer, spaces);\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n\n    /* falls through */\n\n    default:\n      return undefined;\n  }\n};\n\nJson.prototype.serialize.contentType = 'application/json';\n/**\n * Parse a JSON string, if it is already parsed it is ignored\n * @param  {String} str - the string to parse\n * @return {[type]}\n */\n\nJson.prototype.deserialize = function (str) {\n  if (typeof str === 'string') {\n    try {\n      return JSON.parse(str);\n    } catch (e) {}\n  }\n};\n\nJson.prototype.bulkBody = function (val) {\n  var body = '';\n  var i;\n\n  if (_.isArray(val)) {\n    for (i = 0; i < val.length; i++) {\n      body += this.serialize(val[i]) + '\\n';\n    }\n  } else if (typeof val === 'string') {\n    // make sure the string ends in a new line\n    body = val + (val[val.length - 1] === '\\n' ? '' : '\\n');\n  } else {\n    throw new TypeError('Bulk body should either be an Array of commands/string, or a String');\n  }\n\n  return body;\n};\n\nJson.prototype.bulkBody.contentType = 'application/x-ndjson';","map":{"version":3,"sources":["/Users/salonibhogale/qhsearchui/node_modules/elasticsearch/src/lib/serializers/json.js"],"names":["module","exports","Json","_","require","prototype","serialize","val","replacer","spaces","JSON","stringify","undefined","contentType","deserialize","str","parse","e","bulkBody","body","i","isArray","length","TypeError"],"mappings":"AAAA;;;;AAIAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AAEA,SAASF,IAAT,GAAgB,CAAE;AAElB;;;;;;;;AAMAA,IAAI,CAACG,SAAL,CAAeC,SAAf,GAA2B,UAASC,GAAT,EAAcC,QAAd,EAAwBC,MAAxB,EAAgC;AACzD,UAAQ,OAAOF,GAAf;AACE,SAAK,QAAL;AACE,aAAOA,GAAP;;AACF,SAAK,QAAL;AACE,UAAIA,GAAJ,EAAS;AACP,YAAIC,QAAQ,IAAIC,MAAhB,EAAwB;AACtB,iBAAOC,IAAI,CAACC,SAAL,CAAeJ,GAAf,EAAoBC,QAApB,EAA8BC,MAA9B,CAAP;AACD,SAFD,MAEO;AACL,iBAAOC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAAP;AACD;AACF;;AACH;;AACA;AACE,aAAOK,SAAP;AAbJ;AAeD,CAhBD;;AAkBAV,IAAI,CAACG,SAAL,CAAeC,SAAf,CAAyBO,WAAzB,GAAuC,kBAAvC;AAEA;;;;;;AAKAX,IAAI,CAACG,SAAL,CAAeS,WAAf,GAA6B,UAASC,GAAT,EAAc;AACzC,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,QAAI;AACF,aAAOL,IAAI,CAACM,KAAL,CAAWD,GAAX,CAAP;AACD,KAFD,CAEE,OAAOE,CAAP,EAAU,CAAE;AACf;AACF,CAND;;AAQAf,IAAI,CAACG,SAAL,CAAea,QAAf,GAA0B,UAASX,GAAT,EAAc;AACtC,MAAIY,IAAI,GAAG,EAAX;AACA,MAAIC,CAAJ;;AAEA,MAAIjB,CAAC,CAACkB,OAAF,CAAUd,GAAV,CAAJ,EAAoB;AAClB,SAAKa,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGb,GAAG,CAACe,MAApB,EAA4BF,CAAC,EAA7B,EAAiC;AAC/BD,MAAAA,IAAI,IAAI,KAAKb,SAAL,CAAeC,GAAG,CAACa,CAAD,CAAlB,IAAyB,IAAjC;AACD;AACF,GAJD,MAIO,IAAI,OAAOb,GAAP,KAAe,QAAnB,EAA6B;AAClC;AACAY,IAAAA,IAAI,GAAGZ,GAAG,IAAIA,GAAG,CAACA,GAAG,CAACe,MAAJ,GAAa,CAAd,CAAH,KAAwB,IAAxB,GAA+B,EAA/B,GAAoC,IAAxC,CAAV;AACD,GAHM,MAGA;AACL,UAAM,IAAIC,SAAJ,CACJ,qEADI,CAAN;AAGD;;AAED,SAAOJ,IAAP;AACD,CAlBD;;AAoBAjB,IAAI,CAACG,SAAL,CAAea,QAAf,CAAwBL,WAAxB,GAAsC,sBAAtC","sourcesContent":["/**\n * Simple JSON serializer\n * @type {[type]}\n */\nmodule.exports = Json;\n\nvar _ = require('lodash');\n\nfunction Json() {}\n\n/**\n * Converts a value into a string, or an error\n * @param  {*} val - Any value, methods are stripped and\n * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify about other params\n * @return {String|Error} - A string is always returned, unless an error occured. then it will be that error.\n */\nJson.prototype.serialize = function(val, replacer, spaces) {\n  switch (typeof val) {\n    case 'string':\n      return val;\n    case 'object':\n      if (val) {\n        if (replacer || spaces) {\n          return JSON.stringify(val, replacer, spaces);\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    /* falls through */\n    default:\n      return undefined;\n  }\n};\n\nJson.prototype.serialize.contentType = 'application/json';\n\n/**\n * Parse a JSON string, if it is already parsed it is ignored\n * @param  {String} str - the string to parse\n * @return {[type]}\n */\nJson.prototype.deserialize = function(str) {\n  if (typeof str === 'string') {\n    try {\n      return JSON.parse(str);\n    } catch (e) {}\n  }\n};\n\nJson.prototype.bulkBody = function(val) {\n  var body = '';\n  var i;\n\n  if (_.isArray(val)) {\n    for (i = 0; i < val.length; i++) {\n      body += this.serialize(val[i]) + '\\n';\n    }\n  } else if (typeof val === 'string') {\n    // make sure the string ends in a new line\n    body = val + (val[val.length - 1] === '\\n' ? '' : '\\n');\n  } else {\n    throw new TypeError(\n      'Bulk body should either be an Array of commands/string, or a String'\n    );\n  }\n\n  return body;\n};\n\nJson.prototype.bulkBody.contentType = 'application/x-ndjson';\n"]},"metadata":{},"sourceType":"script"}