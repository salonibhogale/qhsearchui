{"ast":null,"code":"/* global jQuery: false */\n\n/**\n * Simple connection class for using the XHR object in browsers\n *\n * @class {XhrConnection}\n */\nmodule.exports = JqueryConnector;\n\nvar utils = require('../utils');\n\nvar ConnectionAbstract = require('../connection');\n\nvar ConnectionFault = require('../errors').ConnectionFault;\n\nfunction JqueryConnector(host, config) {\n  ConnectionAbstract.call(this, host, config);\n}\n\nutils.inherits(JqueryConnector, ConnectionAbstract);\n\nJqueryConnector.prototype.request = function (params, cb) {\n  var ajax = {\n    url: this.host.makeUrl(params),\n    data: params.body,\n    type: params.method,\n    dataType: 'text',\n    headers: this.host.getHeaders(params.headers),\n    done: cb\n  };\n  var jqXHR = jQuery.ajax(ajax).done(function (data) {\n    cb(null, data, jqXHR.statusCode(), {\n      'content-type': jqXHR.getResponseHeader('content-type')\n    });\n  }).fail(function (a, b, err) {\n    // if response is available, execute cb. Else throw ConnectionFault\n    if (a && a.responseText) {\n      cb(null, a.responseText, jqXHR.statusCode(), {\n        'content-type': jqXHR.getResponseHeader('content-type')\n      });\n    } else {\n      cb(new ConnectionFault(err && err.message));\n    }\n  });\n  return function () {\n    jqXHR.abort();\n  };\n};","map":{"version":3,"sources":["/Users/salonibhogale/qhsearchui/node_modules/elasticsearch/src/lib/connectors/jquery.js"],"names":["module","exports","JqueryConnector","utils","require","ConnectionAbstract","ConnectionFault","host","config","call","inherits","prototype","request","params","cb","ajax","url","makeUrl","data","body","type","method","dataType","headers","getHeaders","done","jqXHR","jQuery","statusCode","getResponseHeader","fail","a","b","err","responseText","message","abort"],"mappings":"AAAA;;AAEA;;;;;AAKAA,MAAM,CAACC,OAAP,GAAiBC,eAAjB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,eAAD,CAAhC;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,WAAD,CAAP,CAAqBE,eAA3C;;AAEA,SAASJ,eAAT,CAAyBK,IAAzB,EAA+BC,MAA/B,EAAuC;AACrCH,EAAAA,kBAAkB,CAACI,IAAnB,CAAwB,IAAxB,EAA8BF,IAA9B,EAAoCC,MAApC;AACD;;AACDL,KAAK,CAACO,QAAN,CAAeR,eAAf,EAAgCG,kBAAhC;;AAEAH,eAAe,CAACS,SAAhB,CAA0BC,OAA1B,GAAoC,UAASC,MAAT,EAAiBC,EAAjB,EAAqB;AACvD,MAAIC,IAAI,GAAG;AACTC,IAAAA,GAAG,EAAE,KAAKT,IAAL,CAAUU,OAAV,CAAkBJ,MAAlB,CADI;AAETK,IAAAA,IAAI,EAAEL,MAAM,CAACM,IAFJ;AAGTC,IAAAA,IAAI,EAAEP,MAAM,CAACQ,MAHJ;AAITC,IAAAA,QAAQ,EAAE,MAJD;AAKTC,IAAAA,OAAO,EAAE,KAAKhB,IAAL,CAAUiB,UAAV,CAAqBX,MAAM,CAACU,OAA5B,CALA;AAMTE,IAAAA,IAAI,EAAEX;AANG,GAAX;AASA,MAAIY,KAAK,GAAGC,MAAM,CACfZ,IADS,CACJA,IADI,EAETU,IAFS,CAEJ,UAASP,IAAT,EAAe;AACnBJ,IAAAA,EAAE,CAAC,IAAD,EAAOI,IAAP,EAAaQ,KAAK,CAACE,UAAN,EAAb,EAAiC;AACjC,sBAAgBF,KAAK,CAACG,iBAAN,CAAwB,cAAxB;AADiB,KAAjC,CAAF;AAGD,GANS,EAOTC,IAPS,CAOJ,UAASC,CAAT,EAAYC,CAAZ,EAAeC,GAAf,EAAoB;AACxB;AACA,QAAIF,CAAC,IAAIA,CAAC,CAACG,YAAX,EAAyB;AACvBpB,MAAAA,EAAE,CAAC,IAAD,EAAOiB,CAAC,CAACG,YAAT,EAAuBR,KAAK,CAACE,UAAN,EAAvB,EAA2C;AAC3C,wBAAgBF,KAAK,CAACG,iBAAN,CAAwB,cAAxB;AAD2B,OAA3C,CAAF;AAGD,KAJD,MAIO;AACLf,MAAAA,EAAE,CAAC,IAAIR,eAAJ,CAAoB2B,GAAG,IAAIA,GAAG,CAACE,OAA/B,CAAD,CAAF;AACD;AACF,GAhBS,CAAZ;AAkBA,SAAO,YAAW;AAChBT,IAAAA,KAAK,CAACU,KAAN;AACD,GAFD;AAGD,CA/BD","sourcesContent":["/* global jQuery: false */\n\n/**\n * Simple connection class for using the XHR object in browsers\n *\n * @class {XhrConnection}\n */\nmodule.exports = JqueryConnector;\n\nvar utils = require('../utils');\nvar ConnectionAbstract = require('../connection');\nvar ConnectionFault = require('../errors').ConnectionFault;\n\nfunction JqueryConnector(host, config) {\n  ConnectionAbstract.call(this, host, config);\n}\nutils.inherits(JqueryConnector, ConnectionAbstract);\n\nJqueryConnector.prototype.request = function(params, cb) {\n  var ajax = {\n    url: this.host.makeUrl(params),\n    data: params.body,\n    type: params.method,\n    dataType: 'text',\n    headers: this.host.getHeaders(params.headers),\n    done: cb,\n  };\n\n  var jqXHR = jQuery\n    .ajax(ajax)\n    .done(function(data) {\n      cb(null, data, jqXHR.statusCode(), {\n        'content-type': jqXHR.getResponseHeader('content-type'),\n      });\n    })\n    .fail(function(a, b, err) {\n      // if response is available, execute cb. Else throw ConnectionFault\n      if (a && a.responseText) {\n        cb(null, a.responseText, jqXHR.statusCode(), {\n          'content-type': jqXHR.getResponseHeader('content-type'),\n        });\n      } else {\n        cb(new ConnectionFault(err && err.message));\n      }\n    });\n\n  return function() {\n    jqXHR.abort();\n  };\n};\n"]},"metadata":{},"sourceType":"script"}