{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utils_1 = require(\"../support/Utils\");\n\nvar query_dsl_1 = require(\"./query_dsl\");\n\nvar update = require('immutability-helper');\n\nvar omitBy = require('lodash/omitBy');\n\nvar omit = require('lodash/omit');\n\nvar values = require('lodash/values');\n\nvar pick = require('lodash/pick');\n\nvar merge = require('lodash/merge');\n\nvar isUndefined = require('lodash/isUndefined');\n\nvar ImmutableQuery =\n/** @class */\nfunction () {\n  function ImmutableQuery(index) {\n    if (index === void 0) {\n      index = ImmutableQuery.defaultIndex;\n    }\n\n    this.index = index;\n    this.buildQuery();\n  }\n\n  ImmutableQuery.prototype.buildQuery = function () {\n    var query = {};\n\n    if (this.index.queries.length > 0) {\n      query.query = query_dsl_1.BoolMust(this.index.queries);\n    }\n\n    if (this.index.filters.length > 0) {\n      query.post_filter = query_dsl_1.BoolMust(this.index.filters);\n    }\n\n    query.aggs = this.index.aggs;\n    query.size = this.index.size;\n    query.from = this.index.from;\n    query.sort = this.index.sort;\n    query.highlight = this.index.highlight;\n    query.suggest = this.index.suggest;\n\n    if (this.index._source) {\n      query._source = this.index._source;\n    }\n\n    this.query = omitBy(query, isUndefined);\n  };\n\n  ImmutableQuery.prototype.hasFilters = function () {\n    return this.index.filters.length > 0;\n  };\n\n  ImmutableQuery.prototype.hasFiltersOrQuery = function () {\n    return this.index.queries.length + this.index.filters.length > 0 || !!this.index.sort;\n  };\n\n  ImmutableQuery.prototype.addQuery = function (query) {\n    if (!query) {\n      return this;\n    }\n\n    return this.update({\n      queries: {\n        $push: [query]\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setQueryString = function (queryString) {\n    return this.update({\n      $merge: {\n        queryString: queryString\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getQueryString = function () {\n    return this.index.queryString;\n  };\n\n  ImmutableQuery.prototype.addSelectedFilter = function (selectedFilter) {\n    return this.addSelectedFilters([selectedFilter]);\n  };\n\n  ImmutableQuery.prototype.addSelectedFilters = function (selectedFilters) {\n    return this.update({\n      selectedFilters: {\n        $push: selectedFilters\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getSelectedFilters = function () {\n    return this.index.selectedFilters;\n  };\n\n  ImmutableQuery.prototype.addAnonymousFilter = function (bool) {\n    return this.addFilter(Utils_1.Utils.guid(), bool);\n  };\n\n  ImmutableQuery.prototype.addFilter = function (key, filter) {\n    var _a;\n\n    return this.update({\n      filters: {\n        $push: [filter]\n      },\n      filtersMap: {\n        $merge: (_a = {}, _a[key] = filter, _a)\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setAggs = function (aggs) {\n    return this.deepUpdate('aggs', aggs);\n  };\n\n  ImmutableQuery.prototype.getFilters = function (keys) {\n    if (keys === void 0) {\n      keys = [];\n    }\n\n    return this.getFiltersWithoutKeys(keys);\n  };\n\n  ImmutableQuery.prototype._getFilters = function (keys, method) {\n    keys = [].concat(keys);\n    var filters = values(method(this.index.filtersMap || {}, keys));\n    return query_dsl_1.BoolMust(filters);\n  };\n\n  ImmutableQuery.prototype.getFiltersWithKeys = function (keys) {\n    return this._getFilters(keys, pick);\n  };\n\n  ImmutableQuery.prototype.getFiltersWithoutKeys = function (keys) {\n    return this._getFilters(keys, omit);\n  };\n\n  ImmutableQuery.prototype.setSize = function (size) {\n    return this.update({\n      $merge: {\n        size: size\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setSort = function (sort) {\n    return this.update({\n      $merge: {\n        sort: sort\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setSource = function (_source) {\n    return this.update({\n      $merge: {\n        _source: _source\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.setHighlight = function (highlight) {\n    return this.deepUpdate('highlight', highlight);\n  };\n\n  ImmutableQuery.prototype.getSize = function () {\n    return this.query.size;\n  };\n\n  ImmutableQuery.prototype.setFrom = function (from) {\n    return this.update({\n      $merge: {\n        from: from\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.getFrom = function () {\n    return this.query.from;\n  };\n\n  ImmutableQuery.prototype.getPage = function () {\n    return 1 + Math.floor((this.getFrom() || 0) / (this.getSize() || 10));\n  };\n\n  ImmutableQuery.prototype.deepUpdate = function (key, ob) {\n    var _a;\n\n    return this.update({\n      $merge: (_a = {}, _a[key] = merge({}, this.index[key] || {}, ob), _a)\n    });\n  };\n\n  ImmutableQuery.prototype.setSuggestions = function (suggestions) {\n    return this.update({\n      $merge: {\n        suggest: suggestions\n      }\n    });\n  };\n\n  ImmutableQuery.prototype.update = function (updateDef) {\n    return new ImmutableQuery(update(this.index, updateDef));\n  };\n\n  ImmutableQuery.prototype.getJSON = function () {\n    return this.query;\n  };\n\n  ImmutableQuery.prototype.printJSON = function () {\n    console.log(JSON.stringify(this.getJSON(), null, 2));\n  };\n\n  ImmutableQuery.defaultIndex = {\n    queryString: '',\n    filtersMap: {},\n    selectedFilters: [],\n    queries: [],\n    filters: [],\n    _source: null,\n    size: 0\n  };\n  return ImmutableQuery;\n}();\n\nexports.ImmutableQuery = ImmutableQuery;","map":{"version":3,"sources":["../../../src/core/query/ImmutableQuery.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar Utils_1 = require(\"../support/Utils\");\nvar query_dsl_1 = require(\"./query_dsl\");\nvar update = require('immutability-helper');\nvar omitBy = require('lodash/omitBy');\nvar omit = require('lodash/omit');\nvar values = require('lodash/values');\nvar pick = require('lodash/pick');\nvar merge = require('lodash/merge');\nvar isUndefined = require('lodash/isUndefined');\nvar ImmutableQuery = /** @class */ (function () {\n    function ImmutableQuery(index) {\n        if (index === void 0) { index = ImmutableQuery.defaultIndex; }\n        this.index = index;\n        this.buildQuery();\n    }\n    ImmutableQuery.prototype.buildQuery = function () {\n        var query = {};\n        if (this.index.queries.length > 0) {\n            query.query = query_dsl_1.BoolMust(this.index.queries);\n        }\n        if (this.index.filters.length > 0) {\n            query.post_filter = query_dsl_1.BoolMust(this.index.filters);\n        }\n        query.aggs = this.index.aggs;\n        query.size = this.index.size;\n        query.from = this.index.from;\n        query.sort = this.index.sort;\n        query.highlight = this.index.highlight;\n        query.suggest = this.index.suggest;\n        if (this.index._source) {\n            query._source = this.index._source;\n        }\n        this.query = omitBy(query, isUndefined);\n    };\n    ImmutableQuery.prototype.hasFilters = function () {\n        return this.index.filters.length > 0;\n    };\n    ImmutableQuery.prototype.hasFiltersOrQuery = function () {\n        return this.index.queries.length + this.index.filters.length > 0 || !!this.index.sort;\n    };\n    ImmutableQuery.prototype.addQuery = function (query) {\n        if (!query) {\n            return this;\n        }\n        return this.update({\n            queries: { $push: [query] }\n        });\n    };\n    ImmutableQuery.prototype.setQueryString = function (queryString) {\n        return this.update({ $merge: { queryString: queryString } });\n    };\n    ImmutableQuery.prototype.getQueryString = function () {\n        return this.index.queryString;\n    };\n    ImmutableQuery.prototype.addSelectedFilter = function (selectedFilter) {\n        return this.addSelectedFilters([selectedFilter]);\n    };\n    ImmutableQuery.prototype.addSelectedFilters = function (selectedFilters) {\n        return this.update({\n            selectedFilters: { $push: selectedFilters }\n        });\n    };\n    ImmutableQuery.prototype.getSelectedFilters = function () {\n        return this.index.selectedFilters;\n    };\n    ImmutableQuery.prototype.addAnonymousFilter = function (bool) {\n        return this.addFilter(Utils_1.Utils.guid(), bool);\n    };\n    ImmutableQuery.prototype.addFilter = function (key, filter) {\n        var _a;\n        return this.update({\n            filters: { $push: [filter] },\n            filtersMap: { $merge: (_a = {}, _a[key] = filter, _a) }\n        });\n    };\n    ImmutableQuery.prototype.setAggs = function (aggs) {\n        return this.deepUpdate('aggs', aggs);\n    };\n    ImmutableQuery.prototype.getFilters = function (keys) {\n        if (keys === void 0) { keys = []; }\n        return this.getFiltersWithoutKeys(keys);\n    };\n    ImmutableQuery.prototype._getFilters = function (keys, method) {\n        keys = [].concat(keys);\n        var filters = values(method(this.index.filtersMap || {}, keys));\n        return query_dsl_1.BoolMust(filters);\n    };\n    ImmutableQuery.prototype.getFiltersWithKeys = function (keys) {\n        return this._getFilters(keys, pick);\n    };\n    ImmutableQuery.prototype.getFiltersWithoutKeys = function (keys) {\n        return this._getFilters(keys, omit);\n    };\n    ImmutableQuery.prototype.setSize = function (size) {\n        return this.update({ $merge: { size: size } });\n    };\n    ImmutableQuery.prototype.setSort = function (sort) {\n        return this.update({ $merge: { sort: sort } });\n    };\n    ImmutableQuery.prototype.setSource = function (_source) {\n        return this.update({ $merge: { _source: _source } });\n    };\n    ImmutableQuery.prototype.setHighlight = function (highlight) {\n        return this.deepUpdate('highlight', highlight);\n    };\n    ImmutableQuery.prototype.getSize = function () {\n        return this.query.size;\n    };\n    ImmutableQuery.prototype.setFrom = function (from) {\n        return this.update({ $merge: { from: from } });\n    };\n    ImmutableQuery.prototype.getFrom = function () {\n        return this.query.from;\n    };\n    ImmutableQuery.prototype.getPage = function () {\n        return 1 + Math.floor((this.getFrom() || 0) / (this.getSize() || 10));\n    };\n    ImmutableQuery.prototype.deepUpdate = function (key, ob) {\n        var _a;\n        return this.update({\n            $merge: (_a = {},\n                _a[key] = merge({}, this.index[key] || {}, ob),\n                _a)\n        });\n    };\n    ImmutableQuery.prototype.setSuggestions = function (suggestions) {\n        return this.update({\n            $merge: { suggest: suggestions }\n        });\n    };\n    ImmutableQuery.prototype.update = function (updateDef) {\n        return new ImmutableQuery(update(this.index, updateDef));\n    };\n    ImmutableQuery.prototype.getJSON = function () {\n        return this.query;\n    };\n    ImmutableQuery.prototype.printJSON = function () {\n        console.log(JSON.stringify(this.getJSON(), null, 2));\n    };\n    ImmutableQuery.defaultIndex = {\n        queryString: '',\n        filtersMap: {},\n        selectedFilters: [],\n        queries: [],\n        filters: [],\n        _source: null,\n        size: 0\n    };\n    return ImmutableQuery;\n}());\nexports.ImmutableQuery = ImmutableQuery;\n//# sourceMappingURL=ImmutableQuery.js.map"]},"metadata":{},"sourceType":"script"}