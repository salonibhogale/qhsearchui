{"ast":null,"code":"/**\n * Special version of the Stream logger, which logs errors and warnings to stderr and all other\n * levels to stdout.\n *\n * @class Loggers.Console\n * @extends LoggerAbstract\n * @constructor\n * @param {Object} config - The configuration for the Logger\n * @param {string} config.level - The highest log level for this logger to output.\n * @param {Log} bridge - The object that triggers logging events, which we will record\n */\nmodule.exports = Console;\n\nvar LoggerAbstract = require('../logger');\n\nvar _ = require('lodash');\n\nvar utils = require('../utils');\n\nfunction Console(log, config) {\n  LoggerAbstract.call(this, log, config); // config/state\n\n  this.color = _.has(config, 'color') ? !!config.color : true;\n}\n\nutils.inherits(Console, LoggerAbstract);\n/**\n * Override the LoggerAbstract's setup listeners to do a little extra setup\n *\n * @param  {Array} levels - The levels that we should be listeneing for\n */\n\nConsole.prototype.setupListeners = function (levels) {\n  // call the super method\n  LoggerAbstract.prototype.setupListeners.call(this, levels);\n};\n\nConsole.prototype.write = function (label, message, to) {\n  if (console[to]) {\n    console[to](this.format(label, message));\n  }\n};\n/**\n * Handler for the bridges \"error\" event\n *\n * @method onError\n * @private\n * @param  {Error} e - The Error object to log\n * @return {undefined}\n */\n\n\nConsole.prototype.onError = utils.handler(function (e) {\n  var to = console.error ? 'error' : 'log';\n  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack || e.message, to);\n});\n/**\n * Handler for the bridges \"warning\" event\n *\n * @method onWarning\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nConsole.prototype.onWarning = utils.handler(function (msg) {\n  this.write('WARNING', msg, console.warn ? 'warn' : 'log');\n});\n/**\n * Handler for the bridges \"info\" event\n *\n * @method onInfo\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nConsole.prototype.onInfo = utils.handler(function (msg) {\n  this.write('INFO', msg, console.info ? 'info' : 'log');\n});\n/**\n * Handler for the bridges \"debug\" event\n *\n * @method onDebug\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nConsole.prototype.onDebug = utils.handler(function (msg) {\n  this.write('DEBUG', msg, console.debug ? 'debug' : 'log');\n});\n/**\n * Handler for the bridges \"trace\" event\n *\n * @method onTrace\n * @private\n * @return {undefined}\n */\n\nConsole.prototype.onTrace = utils.handler(function (msg) {\n  this.write('TRACE', this._formatTraceMessage(msg), 'log');\n});","map":{"version":3,"sources":["/Users/mohitkumar/github/qhsearch/new_qhsearch/ui/node_modules/elasticsearch/src/lib/loggers/console.js"],"names":["module","exports","Console","LoggerAbstract","require","_","utils","log","config","call","color","has","inherits","prototype","setupListeners","levels","write","label","message","to","console","format","onError","handler","e","error","name","stack","onWarning","msg","warn","onInfo","info","onDebug","debug","onTrace","_formatTraceMessage"],"mappings":"AAAA;;;;;;;;;;;AAYAA,MAAM,CAACC,OAAP,GAAiBC,OAAjB;;AAEA,IAAIC,cAAc,GAAGC,OAAO,CAAC,WAAD,CAA5B;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AAEA,SAASF,OAAT,CAAiBK,GAAjB,EAAsBC,MAAtB,EAA8B;AAC5BL,EAAAA,cAAc,CAACM,IAAf,CAAoB,IAApB,EAA0BF,GAA1B,EAA+BC,MAA/B,EAD4B,CAG5B;;AACA,OAAKE,KAAL,GAAaL,CAAC,CAACM,GAAF,CAAMH,MAAN,EAAc,OAAd,IAAyB,CAAC,CAACA,MAAM,CAACE,KAAlC,GAA0C,IAAvD;AACD;;AACDJ,KAAK,CAACM,QAAN,CAAeV,OAAf,EAAwBC,cAAxB;AAEA;;;;;;AAKAD,OAAO,CAACW,SAAR,CAAkBC,cAAlB,GAAmC,UAASC,MAAT,EAAiB;AAClD;AACAZ,EAAAA,cAAc,CAACU,SAAf,CAAyBC,cAAzB,CAAwCL,IAAxC,CAA6C,IAA7C,EAAmDM,MAAnD;AACD,CAHD;;AAKAb,OAAO,CAACW,SAAR,CAAkBG,KAAlB,GAA0B,UAASC,KAAT,EAAgBC,OAAhB,EAAyBC,EAAzB,EAA6B;AACrD,MAAIC,OAAO,CAACD,EAAD,CAAX,EAAiB;AACfC,IAAAA,OAAO,CAACD,EAAD,CAAP,CAAY,KAAKE,MAAL,CAAYJ,KAAZ,EAAmBC,OAAnB,CAAZ;AACD;AACF,CAJD;AAMA;;;;;;;;;;AAQAhB,OAAO,CAACW,SAAR,CAAkBS,OAAlB,GAA4BhB,KAAK,CAACiB,OAAN,CAAc,UAASC,CAAT,EAAY;AACpD,MAAIL,EAAE,GAAGC,OAAO,CAACK,KAAR,GAAgB,OAAhB,GAA0B,KAAnC;AACA,OAAKT,KAAL,CAAWQ,CAAC,CAACE,IAAF,KAAW,OAAX,GAAqB,OAArB,GAA+BF,CAAC,CAACE,IAA5C,EAAkDF,CAAC,CAACG,KAAF,IAAWH,CAAC,CAACN,OAA/D,EAAwEC,EAAxE;AACD,CAH2B,CAA5B;AAKA;;;;;;;;;AAQAjB,OAAO,CAACW,SAAR,CAAkBe,SAAlB,GAA8BtB,KAAK,CAACiB,OAAN,CAAc,UAASM,GAAT,EAAc;AACxD,OAAKb,KAAL,CAAW,SAAX,EAAsBa,GAAtB,EAA2BT,OAAO,CAACU,IAAR,GAAe,MAAf,GAAwB,KAAnD;AACD,CAF6B,CAA9B;AAIA;;;;;;;;;AAQA5B,OAAO,CAACW,SAAR,CAAkBkB,MAAlB,GAA2BzB,KAAK,CAACiB,OAAN,CAAc,UAASM,GAAT,EAAc;AACrD,OAAKb,KAAL,CAAW,MAAX,EAAmBa,GAAnB,EAAwBT,OAAO,CAACY,IAAR,GAAe,MAAf,GAAwB,KAAhD;AACD,CAF0B,CAA3B;AAIA;;;;;;;;;AAQA9B,OAAO,CAACW,SAAR,CAAkBoB,OAAlB,GAA4B3B,KAAK,CAACiB,OAAN,CAAc,UAASM,GAAT,EAAc;AACtD,OAAKb,KAAL,CAAW,OAAX,EAAoBa,GAApB,EAAyBT,OAAO,CAACc,KAAR,GAAgB,OAAhB,GAA0B,KAAnD;AACD,CAF2B,CAA5B;AAGA;;;;;;;;AAOAhC,OAAO,CAACW,SAAR,CAAkBsB,OAAlB,GAA4B7B,KAAK,CAACiB,OAAN,CAAc,UAASM,GAAT,EAAc;AACtD,OAAKb,KAAL,CAAW,OAAX,EAAoB,KAAKoB,mBAAL,CAAyBP,GAAzB,CAApB,EAAmD,KAAnD;AACD,CAF2B,CAA5B","sourcesContent":["/**\n * Special version of the Stream logger, which logs errors and warnings to stderr and all other\n * levels to stdout.\n *\n * @class Loggers.Console\n * @extends LoggerAbstract\n * @constructor\n * @param {Object} config - The configuration for the Logger\n * @param {string} config.level - The highest log level for this logger to output.\n * @param {Log} bridge - The object that triggers logging events, which we will record\n */\n\nmodule.exports = Console;\n\nvar LoggerAbstract = require('../logger');\nvar _ = require('lodash');\nvar utils = require('../utils');\n\nfunction Console(log, config) {\n  LoggerAbstract.call(this, log, config);\n\n  // config/state\n  this.color = _.has(config, 'color') ? !!config.color : true;\n}\nutils.inherits(Console, LoggerAbstract);\n\n/**\n * Override the LoggerAbstract's setup listeners to do a little extra setup\n *\n * @param  {Array} levels - The levels that we should be listeneing for\n */\nConsole.prototype.setupListeners = function(levels) {\n  // call the super method\n  LoggerAbstract.prototype.setupListeners.call(this, levels);\n};\n\nConsole.prototype.write = function(label, message, to) {\n  if (console[to]) {\n    console[to](this.format(label, message));\n  }\n};\n\n/**\n * Handler for the bridges \"error\" event\n *\n * @method onError\n * @private\n * @param  {Error} e - The Error object to log\n * @return {undefined}\n */\nConsole.prototype.onError = utils.handler(function(e) {\n  var to = console.error ? 'error' : 'log';\n  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack || e.message, to);\n});\n\n/**\n * Handler for the bridges \"warning\" event\n *\n * @method onWarning\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nConsole.prototype.onWarning = utils.handler(function(msg) {\n  this.write('WARNING', msg, console.warn ? 'warn' : 'log');\n});\n\n/**\n * Handler for the bridges \"info\" event\n *\n * @method onInfo\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nConsole.prototype.onInfo = utils.handler(function(msg) {\n  this.write('INFO', msg, console.info ? 'info' : 'log');\n});\n\n/**\n * Handler for the bridges \"debug\" event\n *\n * @method onDebug\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nConsole.prototype.onDebug = utils.handler(function(msg) {\n  this.write('DEBUG', msg, console.debug ? 'debug' : 'log');\n});\n/**\n * Handler for the bridges \"trace\" event\n *\n * @method onTrace\n * @private\n * @return {undefined}\n */\nConsole.prototype.onTrace = utils.handler(function(msg) {\n  this.write('TRACE', this._formatTraceMessage(msg), 'log');\n});\n"]},"metadata":{},"sourceType":"script"}