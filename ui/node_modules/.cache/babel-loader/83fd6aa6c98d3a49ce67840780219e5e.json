{"ast":null,"code":"var _ = require('lodash');\n\nvar utils = require('./utils');\n/**\n * Abstract class providing common functionality to loggers\n * @param {[type]} log [description]\n * @param {[type]} config [description]\n */\n\n\nfunction LoggerAbstract(log, config) {\n  this.log = log;\n  this.listeningLevels = [];\n  utils.makeBoundMethods(this); // when the log closes, remove our event listeners\n\n  this.log.once('closing', this.bound.cleanUpListeners);\n  this.setupListeners(config.levels);\n}\n\nfunction padNumToTen(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n/**\n * Create a timestamp string used in the format function. Defers to Log.timestamp if it is defined,\n * Also, feel free to override this at the logger level.\n * @return {String} - Timestamp in ISO 8601 UTC\n */\n\n\nLoggerAbstract.prototype.timestamp = function () {\n  var d = new Date();\n  return d.getUTCFullYear() + '-' + padNumToTen(d.getUTCMonth() + 1) + '-' + padNumToTen(d.getUTCDate()) + 'T' + padNumToTen(d.getUTCHours()) + ':' + padNumToTen(d.getUTCMinutes()) + ':' + padNumToTen(d.getUTCSeconds()) + 'Z';\n};\n\nfunction indent(text, spaces) {\n  var space = utils.repeat(' ', spaces || 2);\n  return (text || '').split(/\\r?\\n/).map(function (line) {\n    return space + line;\n  }).join('\\n');\n}\n\nLoggerAbstract.prototype.format = function (label, message) {\n  return label + ': ' + this.timestamp() + '\\n' + indent(message) + '\\n\\n';\n};\n\nLoggerAbstract.prototype.write = function () {\n  throw new Error('This should be overwritten by the logger');\n};\n/**\n * Clear the current event listeners and then re-listen for events based on the level specified\n *\n * @method setupListeners\n * @private\n * @param  {Integer} level - The max log level that this logger should listen to\n * @return {undefined}\n */\n\n\nLoggerAbstract.prototype.setupListeners = function (levels) {\n  this.cleanUpListeners();\n  this.listeningLevels = [];\n\n  _.each(levels, _.bind(function (level) {\n    var fnName = 'on' + utils.ucfirst(level);\n\n    if (this.bound[fnName]) {\n      this.listeningLevels.push(level);\n      this.log.on(level, this.bound[fnName]);\n    } else {\n      throw new Error('Unable to listen for level \"' + level + '\"');\n    }\n  }, this));\n};\n/**\n * Clear the current event listeners\n *\n * @method cleanUpListeners\n * @private\n * @return {undefined}\n */\n\n\nLoggerAbstract.prototype.cleanUpListeners = utils.handler(function () {\n  _.each(this.listeningLevels, _.bind(function (level) {\n    this.log.removeListener(level, this.bound['on' + utils.ucfirst(level)]);\n  }, this));\n});\n/**\n * Handler for the logs \"error\" event\n *\n * @method onError\n * @private\n * @param  {Error} e - The Error object to log\n * @return {undefined}\n */\n\nLoggerAbstract.prototype.onError = utils.handler(function (e) {\n  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack);\n});\n/**\n * Handler for the logs \"warning\" event\n *\n * @method onWarning\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nLoggerAbstract.prototype.onWarning = utils.handler(function (msg) {\n  this.write('WARNING', msg);\n});\n/**\n * Handler for the logs \"info\" event\n *\n * @method onInfo\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nLoggerAbstract.prototype.onInfo = utils.handler(function (msg) {\n  this.write('INFO', msg);\n});\n/**\n * Handler for the logs \"debug\" event\n *\n * @method onDebug\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nLoggerAbstract.prototype.onDebug = utils.handler(function (msg) {\n  this.write('DEBUG', msg);\n});\n/**\n * Handler for the logs \"trace\" event\n *\n * @method onTrace\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\n\nLoggerAbstract.prototype.onTrace = utils.handler(function (requestDetails) {\n  this.write('TRACE', this._formatTraceMessage(requestDetails));\n});\n\nLoggerAbstract.prototype._formatTraceMessage = function (req) {\n  return '-> ' + req.method + ' ' + req.url + '\\n' + this._prettyJson(req.body) + '\\n' + '<- ' + req.status + '\\n' + this._prettyJson(req.response);\n  /*\n  -> GET https://sldfkjsdlfksjdf:9200/slsdkfjlxckvxhclks?sdlkj=sdlfkje\n  {\n  asdflksjdf\n  }\n  <- 502\n  {\n  sldfksjdlf\n  }\n  */\n};\n\nLoggerAbstract.prototype._prettyJson = function (body) {\n  try {\n    if (typeof body === 'string') {\n      body = JSON.parse(body);\n    }\n\n    return JSON.stringify(body, null, '  ').replace(/'/g, '\\\\u0027');\n  } catch (e) {\n    return typeof body === 'string' ? body : '';\n  }\n};\n\nmodule.exports = LoggerAbstract;","map":{"version":3,"sources":["/Users/mohitkumar/github/qhsearch/new_qhsearch/node_modules/elasticsearch/src/lib/logger.js"],"names":["_","require","utils","LoggerAbstract","log","config","listeningLevels","makeBoundMethods","once","bound","cleanUpListeners","setupListeners","levels","padNumToTen","n","toString","prototype","timestamp","d","Date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","indent","text","spaces","space","repeat","split","map","line","join","format","label","message","write","Error","each","bind","level","fnName","ucfirst","push","on","handler","removeListener","onError","e","name","stack","onWarning","msg","onInfo","onDebug","onTrace","requestDetails","_formatTraceMessage","req","method","url","_prettyJson","body","status","response","JSON","parse","stringify","replace","module","exports"],"mappings":"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","sourcesContent":["var _ = require('lodash');\nvar utils = require('./utils');\n\n/**\n * Abstract class providing common functionality to loggers\n * @param {[type]} log [description]\n * @param {[type]} config [description]\n */\nfunction LoggerAbstract(log, config) {\n  this.log = log;\n  this.listeningLevels = [];\n\n  utils.makeBoundMethods(this);\n\n  // when the log closes, remove our event listeners\n  this.log.once('closing', this.bound.cleanUpListeners);\n\n  this.setupListeners(config.levels);\n}\n\nfunction padNumToTen(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n/**\n * Create a timestamp string used in the format function. Defers to Log.timestamp if it is defined,\n * Also, feel free to override this at the logger level.\n * @return {String} - Timestamp in ISO 8601 UTC\n */\nLoggerAbstract.prototype.timestamp = function() {\n  var d = new Date();\n  return (\n    d.getUTCFullYear() +\n    '-' +\n    padNumToTen(d.getUTCMonth() + 1) +\n    '-' +\n    padNumToTen(d.getUTCDate()) +\n    'T' +\n    padNumToTen(d.getUTCHours()) +\n    ':' +\n    padNumToTen(d.getUTCMinutes()) +\n    ':' +\n    padNumToTen(d.getUTCSeconds()) +\n    'Z'\n  );\n};\n\nfunction indent(text, spaces) {\n  var space = utils.repeat(' ', spaces || 2);\n  return (text || '')\n    .split(/\\r?\\n/)\n    .map(function(line) {\n      return space + line;\n    })\n    .join('\\n');\n}\n\nLoggerAbstract.prototype.format = function(label, message) {\n  return label + ': ' + this.timestamp() + '\\n' + indent(message) + '\\n\\n';\n};\n\nLoggerAbstract.prototype.write = function() {\n  throw new Error('This should be overwritten by the logger');\n};\n\n/**\n * Clear the current event listeners and then re-listen for events based on the level specified\n *\n * @method setupListeners\n * @private\n * @param  {Integer} level - The max log level that this logger should listen to\n * @return {undefined}\n */\nLoggerAbstract.prototype.setupListeners = function(levels) {\n  this.cleanUpListeners();\n\n  this.listeningLevels = [];\n\n  _.each(\n    levels,\n    _.bind(function(level) {\n      var fnName = 'on' + utils.ucfirst(level);\n      if (this.bound[fnName]) {\n        this.listeningLevels.push(level);\n        this.log.on(level, this.bound[fnName]);\n      } else {\n        throw new Error('Unable to listen for level \"' + level + '\"');\n      }\n    }, this)\n  );\n};\n\n/**\n * Clear the current event listeners\n *\n * @method cleanUpListeners\n * @private\n * @return {undefined}\n */\nLoggerAbstract.prototype.cleanUpListeners = utils.handler(function() {\n  _.each(\n    this.listeningLevels,\n    _.bind(function(level) {\n      this.log.removeListener(level, this.bound['on' + utils.ucfirst(level)]);\n    }, this)\n  );\n});\n\n/**\n * Handler for the logs \"error\" event\n *\n * @method onError\n * @private\n * @param  {Error} e - The Error object to log\n * @return {undefined}\n */\nLoggerAbstract.prototype.onError = utils.handler(function(e) {\n  this.write(e.name === 'Error' ? 'ERROR' : e.name, e.stack);\n});\n\n/**\n * Handler for the logs \"warning\" event\n *\n * @method onWarning\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onWarning = utils.handler(function(msg) {\n  this.write('WARNING', msg);\n});\n\n/**\n * Handler for the logs \"info\" event\n *\n * @method onInfo\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onInfo = utils.handler(function(msg) {\n  this.write('INFO', msg);\n});\n\n/**\n * Handler for the logs \"debug\" event\n *\n * @method onDebug\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onDebug = utils.handler(function(msg) {\n  this.write('DEBUG', msg);\n});\n\n/**\n * Handler for the logs \"trace\" event\n *\n * @method onTrace\n * @private\n * @param  {String} msg - The message to be logged\n * @return {undefined}\n */\nLoggerAbstract.prototype.onTrace = utils.handler(function(requestDetails) {\n  this.write('TRACE', this._formatTraceMessage(requestDetails));\n});\n\nLoggerAbstract.prototype._formatTraceMessage = function(req) {\n  return (\n    '-> ' +\n    req.method +\n    ' ' +\n    req.url +\n    '\\n' +\n    this._prettyJson(req.body) +\n    '\\n' +\n    '<- ' +\n    req.status +\n    '\\n' +\n    this._prettyJson(req.response)\n  );\n  /*\n-> GET https://sldfkjsdlfksjdf:9200/slsdkfjlxckvxhclks?sdlkj=sdlfkje\n{\n  asdflksjdf\n}\n\n<- 502\n{\n  sldfksjdlf\n}\n*/\n};\n\nLoggerAbstract.prototype._prettyJson = function(body) {\n  try {\n    if (typeof body === 'string') {\n      body = JSON.parse(body);\n    }\n    return JSON.stringify(body, null, '  ').replace(/'/g, '\\\\u0027');\n  } catch (e) {\n    return typeof body === 'string' ? body : '';\n  }\n};\n\nmodule.exports = LoggerAbstract;\n"]},"metadata":{},"sourceType":"script"}