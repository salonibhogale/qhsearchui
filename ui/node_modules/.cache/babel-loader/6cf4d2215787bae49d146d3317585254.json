{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport { findDOMNode } from 'react-dom';\nimport isRequiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';\nimport BaseDropdownToggle from 'react-overlays/DropdownToggle';\nimport React from 'react';\nimport Button from './Button';\nimport { createBootstrapComponent } from './ThemeProvider';\n\nvar wrapRef = function wrapRef(props) {\n  var ref = props.ref;\n\n  props.ref = ref.__wrapped || (ref.__wrapped = function (r) {\n    return ref(findDOMNode(r));\n  });\n\n  return props;\n};\n\nvar DropdownToggle = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(DropdownToggle, _React$Component);\n\n  function DropdownToggle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = DropdownToggle.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        bsPrefix = _this$props.bsPrefix,\n        split = _this$props.split,\n        className = _this$props.className,\n        children = _this$props.children,\n        childBsPrefix = _this$props.childBsPrefix,\n        Component = _this$props.as,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"bsPrefix\", \"split\", \"className\", \"children\", \"childBsPrefix\", \"as\"]);\n\n    if (childBsPrefix !== undefined) {\n      props.bsPrefix = childBsPrefix;\n    } // This intentionally forwards size and variant (if set) to the\n    // underlying component, to allow it to render size and style variants.\n\n\n    return React.createElement(BaseDropdownToggle, null, function (_ref) {\n      var toggle = _ref.toggle,\n          toggleProps = _ref.props;\n      return React.createElement(Component, _extends({\n        onClick: toggle,\n        className: classNames(className, bsPrefix, split && bsPrefix + \"-split\")\n      }, wrapRef(toggleProps), props), children);\n    });\n  };\n\n  return DropdownToggle;\n}(React.Component); // Needs to be a class FTM, because it needs to accept a ref that can be used with findDOMNode\n\n\nDropdownToggle.defaultProps = {\n  as: Button\n};\nexport default createBootstrapComponent(DropdownToggle, 'dropdown-toggle');","map":{"version":3,"sources":["/Users/mohitkumar/github/qhsearch/new_qhsearch/node_modules/react-bootstrap/esm/DropdownToggle.js"],"names":["_extends","_objectWithoutPropertiesLoose","_inheritsLoose","classNames","findDOMNode","isRequiredForA11y","BaseDropdownToggle","React","Button","createBootstrapComponent","wrapRef","props","ref","__wrapped","r","DropdownToggle","_React$Component","apply","arguments","_proto","prototype","render","_this$props","bsPrefix","split","className","children","childBsPrefix","Component","as","undefined","createElement","_ref","toggle","toggleProps","onClick","defaultProps"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,wBAAT,QAAyC,iBAAzC;;AAEA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACpC,MAAIC,GAAG,GAAGD,KAAK,CAACC,GAAhB;;AAEAD,EAAAA,KAAK,CAACC,GAAN,GAAYA,GAAG,CAACC,SAAJ,KAAkBD,GAAG,CAACC,SAAJ,GAAgB,UAAUC,CAAV,EAAa;AACzD,WAAOF,GAAG,CAACR,WAAW,CAACU,CAAD,CAAZ,CAAV;AACD,GAFW,CAAZ;;AAIA,SAAOH,KAAP;AACD,CARD;;AAUA,IAAII,cAAc,GAClB,aACA,UAAUC,gBAAV,EAA4B;AAC1Bd,EAAAA,cAAc,CAACa,cAAD,EAAiBC,gBAAjB,CAAd;;AAEA,WAASD,cAAT,GAA0B;AACxB,WAAOC,gBAAgB,CAACC,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B,KAA2C,IAAlD;AACD;;AAED,MAAIC,MAAM,GAAGJ,cAAc,CAACK,SAA5B;;AAEAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,SAASA,MAAT,GAAkB;AAChC,QAAIC,WAAW,GAAG,KAAKX,KAAvB;AAAA,QACIY,QAAQ,GAAGD,WAAW,CAACC,QAD3B;AAAA,QAEIC,KAAK,GAAGF,WAAW,CAACE,KAFxB;AAAA,QAGIC,SAAS,GAAGH,WAAW,CAACG,SAH5B;AAAA,QAIIC,QAAQ,GAAGJ,WAAW,CAACI,QAJ3B;AAAA,QAKIC,aAAa,GAAGL,WAAW,CAACK,aALhC;AAAA,QAMIC,SAAS,GAAGN,WAAW,CAACO,EAN5B;AAAA,QAOIlB,KAAK,GAAGV,6BAA6B,CAACqB,WAAD,EAAc,CAAC,UAAD,EAAa,OAAb,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,eAA/C,EAAgE,IAAhE,CAAd,CAPzC;;AASA,QAAIK,aAAa,KAAKG,SAAtB,EAAiC;AAC/BnB,MAAAA,KAAK,CAACY,QAAN,GAAiBI,aAAjB;AACD,KAZ+B,CAY9B;AACF;;;AAGA,WAAOpB,KAAK,CAACwB,aAAN,CAAoBzB,kBAApB,EAAwC,IAAxC,EAA8C,UAAU0B,IAAV,EAAgB;AACnE,UAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,UACIC,WAAW,GAAGF,IAAI,CAACrB,KADvB;AAEA,aAAOJ,KAAK,CAACwB,aAAN,CAAoBH,SAApB,EAA+B5B,QAAQ,CAAC;AAC7CmC,QAAAA,OAAO,EAAEF,MADoC;AAE7CR,QAAAA,SAAS,EAAEtB,UAAU,CAACsB,SAAD,EAAYF,QAAZ,EAAsBC,KAAK,IAAID,QAAQ,GAAG,QAA1C;AAFwB,OAAD,EAG3Cb,OAAO,CAACwB,WAAD,CAHoC,EAGrBvB,KAHqB,CAAvC,EAG0Be,QAH1B,CAAP;AAID,KAPM,CAAP;AAQD,GAxBD;;AA0BA,SAAOX,cAAP;AACD,CApCD,CAoCER,KAAK,CAACqB,SApCR,CAFA,C,CAsCoB;;;AAGpBb,cAAc,CAACqB,YAAf,GAA8B;AAC5BP,EAAAA,EAAE,EAAErB;AADwB,CAA9B;AAGA,eAAeC,wBAAwB,CAACM,cAAD,EAAiB,iBAAjB,CAAvC","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport { findDOMNode } from 'react-dom';\nimport isRequiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';\nimport BaseDropdownToggle from 'react-overlays/DropdownToggle';\nimport React from 'react';\nimport Button from './Button';\nimport { createBootstrapComponent } from './ThemeProvider';\n\nvar wrapRef = function wrapRef(props) {\n  var ref = props.ref;\n\n  props.ref = ref.__wrapped || (ref.__wrapped = function (r) {\n    return ref(findDOMNode(r));\n  });\n\n  return props;\n};\n\nvar DropdownToggle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(DropdownToggle, _React$Component);\n\n  function DropdownToggle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = DropdownToggle.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        bsPrefix = _this$props.bsPrefix,\n        split = _this$props.split,\n        className = _this$props.className,\n        children = _this$props.children,\n        childBsPrefix = _this$props.childBsPrefix,\n        Component = _this$props.as,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"bsPrefix\", \"split\", \"className\", \"children\", \"childBsPrefix\", \"as\"]);\n\n    if (childBsPrefix !== undefined) {\n      props.bsPrefix = childBsPrefix;\n    } // This intentionally forwards size and variant (if set) to the\n    // underlying component, to allow it to render size and style variants.\n\n\n    return React.createElement(BaseDropdownToggle, null, function (_ref) {\n      var toggle = _ref.toggle,\n          toggleProps = _ref.props;\n      return React.createElement(Component, _extends({\n        onClick: toggle,\n        className: classNames(className, bsPrefix, split && bsPrefix + \"-split\")\n      }, wrapRef(toggleProps), props), children);\n    });\n  };\n\n  return DropdownToggle;\n}(React.Component); // Needs to be a class FTM, because it needs to accept a ref that can be used with findDOMNode\n\n\nDropdownToggle.defaultProps = {\n  as: Button\n};\nexport default createBootstrapComponent(DropdownToggle, 'dropdown-toggle');"]},"metadata":{},"sourceType":"module"}