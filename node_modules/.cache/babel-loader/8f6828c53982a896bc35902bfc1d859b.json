{"ast":null,"code":"module.exports = ConnectionAbstract;\n\nvar _ = require('lodash');\n\nvar utils = require('./utils');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Log = require('./log');\n\nvar Host = require('./host');\n\nvar errors = require('./errors');\n/**\n * Abstract class used for Connection classes\n * @class ConnectionAbstract\n * @constructor\n */\n\n\nfunction ConnectionAbstract(host, config) {\n  config = config || {};\n  EventEmitter.call(this);\n  this.log = config.log || new Log();\n  this.pingTimeout = config.pingTimeout || 3000;\n\n  if (!host) {\n    throw new TypeError('Missing host');\n  } else if (host instanceof Host) {\n    this.host = host;\n  } else {\n    throw new TypeError('Invalid host');\n  }\n\n  utils.makeBoundMethods(this);\n}\n\nutils.inherits(ConnectionAbstract, EventEmitter);\n/**\n * Make a request using this connection. Must be overridden by Connection classes, which can add whatever keys to\n * params that they like. These are just the basics.\n *\n * @param [params] {Object} - The parameters for the request\n * @param params.path {String} - The path for which you are requesting\n * @param params.method {String} - The HTTP method for the request (GET, HEAD, etc.)\n * @param params.requestTimeout {Integer} - The amount of time in milliseconds that this request should be allowed to run for.\n * @param cb {Function} - A callback to be called once with `cb(err, responseBody, responseStatus)`\n */\n\nConnectionAbstract.prototype.request = function () {\n  throw new Error('Connection#request must be overwritten by the Connector');\n};\n\nConnectionAbstract.prototype.ping = function (params, cb) {\n  if (typeof params === 'function') {\n    cb = params;\n    params = null;\n  } else {\n    cb = typeof cb === 'function' ? cb : null;\n  }\n\n  var requestTimeout = this.pingTimeout;\n  var requestTimeoutId;\n  var aborted;\n  var abort;\n\n  if (params && params.hasOwnProperty('requestTimeout')) {\n    requestTimeout = params.requestTimeout;\n  }\n\n  abort = this.request(_.defaults(params || {}, {\n    path: '/',\n    method: 'HEAD'\n  }), function (err) {\n    if (aborted) {\n      return;\n    }\n\n    clearTimeout(requestTimeoutId);\n\n    if (cb) {\n      cb(err);\n    }\n  });\n\n  if (requestTimeout) {\n    requestTimeoutId = setTimeout(function () {\n      if (abort) {\n        abort();\n      }\n\n      aborted = true;\n\n      if (cb) {\n        cb(new errors.RequestTimeout('Ping Timeout after ' + requestTimeout + 'ms'));\n      }\n    }, requestTimeout);\n  }\n};\n\nConnectionAbstract.prototype.setStatus = function (status) {\n  var origStatus = this.status;\n  this.status = status;\n  this.emit('status set', status, origStatus, this);\n\n  if (status === 'closed') {\n    this.removeAllListeners();\n  }\n};","map":{"version":3,"sources":["/Users/salonibhogale/qhsearchui/node_modules/elasticsearch/src/lib/connection.js"],"names":["module","exports","ConnectionAbstract","_","require","utils","EventEmitter","Log","Host","errors","host","config","call","log","pingTimeout","TypeError","makeBoundMethods","inherits","prototype","request","Error","ping","params","cb","requestTimeout","requestTimeoutId","aborted","abort","hasOwnProperty","defaults","path","method","err","clearTimeout","setTimeout","RequestTimeout","setStatus","status","origStatus","emit","removeAllListeners"],"mappings":"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","sourcesContent":["module.exports = ConnectionAbstract;\n\nvar _ = require('lodash');\nvar utils = require('./utils');\nvar EventEmitter = require('events').EventEmitter;\nvar Log = require('./log');\nvar Host = require('./host');\nvar errors = require('./errors');\n\n/**\n * Abstract class used for Connection classes\n * @class ConnectionAbstract\n * @constructor\n */\nfunction ConnectionAbstract(host, config) {\n  config = config || {};\n  EventEmitter.call(this);\n\n  this.log = config.log || new Log();\n  this.pingTimeout = config.pingTimeout || 3000;\n\n  if (!host) {\n    throw new TypeError('Missing host');\n  } else if (host instanceof Host) {\n    this.host = host;\n  } else {\n    throw new TypeError('Invalid host');\n  }\n\n  utils.makeBoundMethods(this);\n}\nutils.inherits(ConnectionAbstract, EventEmitter);\n\n/**\n * Make a request using this connection. Must be overridden by Connection classes, which can add whatever keys to\n * params that they like. These are just the basics.\n *\n * @param [params] {Object} - The parameters for the request\n * @param params.path {String} - The path for which you are requesting\n * @param params.method {String} - The HTTP method for the request (GET, HEAD, etc.)\n * @param params.requestTimeout {Integer} - The amount of time in milliseconds that this request should be allowed to run for.\n * @param cb {Function} - A callback to be called once with `cb(err, responseBody, responseStatus)`\n */\nConnectionAbstract.prototype.request = function() {\n  throw new Error('Connection#request must be overwritten by the Connector');\n};\n\nConnectionAbstract.prototype.ping = function(params, cb) {\n  if (typeof params === 'function') {\n    cb = params;\n    params = null;\n  } else {\n    cb = typeof cb === 'function' ? cb : null;\n  }\n\n  var requestTimeout = this.pingTimeout;\n  var requestTimeoutId;\n  var aborted;\n  var abort;\n\n  if (params && params.hasOwnProperty('requestTimeout')) {\n    requestTimeout = params.requestTimeout;\n  }\n\n  abort = this.request(\n    _.defaults(params || {}, {\n      path: '/',\n      method: 'HEAD',\n    }),\n    function(err) {\n      if (aborted) {\n        return;\n      }\n      clearTimeout(requestTimeoutId);\n      if (cb) {\n        cb(err);\n      }\n    }\n  );\n\n  if (requestTimeout) {\n    requestTimeoutId = setTimeout(function() {\n      if (abort) {\n        abort();\n      }\n      aborted = true;\n      if (cb) {\n        cb(\n          new errors.RequestTimeout(\n            'Ping Timeout after ' + requestTimeout + 'ms'\n          )\n        );\n      }\n    }, requestTimeout);\n  }\n};\n\nConnectionAbstract.prototype.setStatus = function(status) {\n  var origStatus = this.status;\n  this.status = status;\n\n  this.emit('status set', status, origStatus, this);\n\n  if (status === 'closed') {\n    this.removeAllListeners();\n  }\n};\n"]},"metadata":{},"sourceType":"script"}