{"ast":null,"code":"/**\n * Class to wrap URLS, formatting them and maintaining their separate details\n * @type {[type]}\n */\nmodule.exports = Host;\n\nvar url = require('url');\n\nvar qs = require('querystring');\n\nvar _ = require('lodash');\n\nvar utils = require('./utils');\n\nvar startsWithProtocolRE = /^([a-z]+:)?\\/\\//;\nvar defaultProto = 'http:';\nvar btoa;\n\nif (typeof window !== 'undefined' && typeof window.location !== 'undefined') {\n  defaultProto = window.location.protocol;\n  btoa = window.btoa;\n}\n\nbtoa = btoa || function (data) {\n  return new Buffer(data, 'utf8').toString('base64');\n};\n\nvar urlParseFields = ['protocol', 'hostname', 'pathname', 'port', 'auth', 'query'];\nvar simplify = ['host', 'path'];\nvar sslDefaults = {\n  pfx: null,\n  key: null,\n  passphrase: null,\n  cert: null,\n  ca: null,\n  ciphers: null,\n  rejectUnauthorized: false,\n  secureProtocol: null\n}; // simple reference used when formatting as a url\n// and defines when parsing from a string\n\nHost.defaultPorts = {\n  http: 80,\n  https: 443\n};\n\nfunction Host(config, globalConfig) {\n  config = _.clone(config || {});\n  globalConfig = globalConfig || {}; // defaults\n\n  this.protocol = 'http';\n  this.host = 'localhost';\n  this.path = '';\n  this.port = 9200;\n  this.query = null;\n  this.headers = null;\n  this.suggestCompression = !!globalConfig.suggestCompression;\n  this.ssl = _.defaults({}, config.ssl || {}, globalConfig.ssl || {}, sslDefaults);\n\n  if (typeof config === 'string') {\n    var firstColon = config.indexOf(':');\n    var firstSlash = config.indexOf('/');\n    var noSlash = firstSlash === -1;\n    var portNoPath = firstColon > -1 && noSlash;\n    var portWithPath = !portNoPath && firstColon < firstSlash;\n\n    if ((noSlash || portNoPath || portWithPath) && !startsWithProtocolRE.test(config)) {\n      config = defaultProto + '//' + config;\n    }\n\n    config = _.pick(url.parse(config, false, true), urlParseFields); // default logic for the port is to use 9200 for the default. When a string is specified though,\n    // we will use the default from the protocol of the string.\n\n    if (!config.port) {\n      var proto = config.protocol || 'http';\n\n      if (proto.charAt(proto.length - 1) === ':') {\n        proto = proto.substring(0, proto.length - 1);\n      }\n\n      if (Host.defaultPorts[proto]) {\n        config.port = Host.defaultPorts[proto];\n      }\n    }\n  }\n\n  if (_.isObject(config)) {\n    // move hostname/portname to host/port semi-intelligently.\n    _.each(simplify, function (to) {\n      var from = to + 'name';\n\n      if (config[from] && config[to]) {\n        if (config[to].indexOf(config[from]) === 0) {\n          config[to] = config[from];\n        }\n      } else if (config[from]) {\n        config[to] = config[from];\n      }\n\n      delete config[from];\n    });\n  } else {\n    config = {};\n  }\n\n  if (!config.auth && globalConfig.httpAuth) {\n    config.auth = globalConfig.httpAuth;\n  }\n\n  if (config.auth) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = 'Basic ' + btoa(config.auth);\n    delete config.auth;\n  }\n\n  _.forOwn(config, _.bind(function (val, prop) {\n    if (val != null) this[prop] = _.clone(val);\n  }, this)); // make sure the query string is parsed\n\n\n  if (this.query === null) {\n    // majority case\n    this.query = {};\n  } else if (!_.isPlainObject(this.query)) {\n    this.query = qs.parse(this.query);\n  } // make sure that the port is a number\n\n\n  if (utils.isNumeric(this.port)) {\n    this.port = parseInt(this.port, 10);\n  } else {\n    this.port = 9200;\n  } // make sure the path starts with a leading slash\n\n\n  if (this.path === '/') {\n    this.path = '';\n  } else if (this.path && this.path.charAt(0) !== '/') {\n    this.path = '/' + (this.path || '');\n  } // strip trailing ':' on the protocol (when config comes from url.parse)\n\n\n  if (this.protocol.substr(-1) === ':') {\n    this.protocol = this.protocol.substring(0, this.protocol.length - 1);\n  }\n}\n\nHost.prototype.makeUrl = function (params) {\n  params = params || {}; // build the port\n\n  var port = '';\n\n  if (this.port !== Host.defaultPorts[this.protocol]) {\n    // add an actual port\n    port = ':' + this.port;\n  } // build the path\n\n\n  var path = '' + (this.path || '') + (params.path || ''); // if path doesn't start with '/' add it.\n\n  if (path.charAt(0) !== '/') {\n    path = '/' + path;\n  } // build the query string\n\n\n  var query = qs.stringify(this.getQuery(params.query));\n\n  if (this.host) {\n    return this.protocol + '://' + this.host + port + path + (query ? '?' + query : '');\n  } else {\n    return path + (query ? '?' + query : '');\n  }\n};\n\nfunction objectPropertyGetter(prop, preOverride) {\n  return function (overrides) {\n    if (preOverride) {\n      overrides = preOverride.call(this, overrides);\n    }\n\n    var obj = this[prop];\n\n    if (!obj && !overrides) {\n      return null;\n    }\n\n    if (overrides) {\n      obj = _.assign({}, obj, overrides);\n    }\n\n    return _.size(obj) ? obj : null;\n  };\n}\n\nHost.prototype.getHeaders = objectPropertyGetter('headers', function (overrides) {\n  if (!this.suggestCompression) {\n    return overrides;\n  }\n\n  return _.defaults(overrides || {}, {\n    'Accept-Encoding': 'gzip,deflate'\n  });\n});\nHost.prototype.getQuery = objectPropertyGetter('query', function (query) {\n  return typeof query === 'string' ? qs.parse(query) : query;\n});\n\nHost.prototype.toString = function () {\n  return this.makeUrl();\n};","map":{"version":3,"sources":["/Users/salonibhogale/qhsearchui/node_modules/elasticsearch/src/lib/host.js"],"names":["module","exports","Host","url","require","qs","_","utils","startsWithProtocolRE","defaultProto","btoa","window","location","protocol","data","Buffer","toString","urlParseFields","simplify","sslDefaults","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","secureProtocol","defaultPorts","http","https","config","globalConfig","clone","host","path","port","query","headers","suggestCompression","ssl","defaults","firstColon","indexOf","firstSlash","noSlash","portNoPath","portWithPath","test","pick","parse","proto","charAt","length","substring","isObject","each","to","from","auth","httpAuth","Authorization","forOwn","bind","val","prop","isPlainObject","isNumeric","parseInt","substr","prototype","makeUrl","params","stringify","getQuery","objectPropertyGetter","preOverride","overrides","call","obj","assign","size","getHeaders"],"mappings":"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","sourcesContent":["/**\n * Class to wrap URLS, formatting them and maintaining their separate details\n * @type {[type]}\n */\nmodule.exports = Host;\n\nvar url = require('url');\nvar qs = require('querystring');\nvar _ = require('lodash');\nvar utils = require('./utils');\n\nvar startsWithProtocolRE = /^([a-z]+:)?\\/\\//;\nvar defaultProto = 'http:';\nvar btoa;\n\nif (typeof window !== 'undefined' && typeof window.location !== 'undefined') {\n  defaultProto = window.location.protocol;\n  btoa = window.btoa;\n}\n\nbtoa =\n  btoa ||\n  function(data) {\n    return new Buffer(data, 'utf8').toString('base64');\n  };\n\nvar urlParseFields = [\n  'protocol',\n  'hostname',\n  'pathname',\n  'port',\n  'auth',\n  'query',\n];\n\nvar simplify = ['host', 'path'];\n\nvar sslDefaults = {\n  pfx: null,\n  key: null,\n  passphrase: null,\n  cert: null,\n  ca: null,\n  ciphers: null,\n  rejectUnauthorized: false,\n  secureProtocol: null,\n};\n\n// simple reference used when formatting as a url\n// and defines when parsing from a string\nHost.defaultPorts = {\n  http: 80,\n  https: 443,\n};\n\nfunction Host(config, globalConfig) {\n  config = _.clone(config || {});\n  globalConfig = globalConfig || {};\n\n  // defaults\n  this.protocol = 'http';\n  this.host = 'localhost';\n  this.path = '';\n  this.port = 9200;\n  this.query = null;\n  this.headers = null;\n  this.suggestCompression = !!globalConfig.suggestCompression;\n\n  this.ssl = _.defaults(\n    {},\n    config.ssl || {},\n    globalConfig.ssl || {},\n    sslDefaults\n  );\n\n  if (typeof config === 'string') {\n    var firstColon = config.indexOf(':');\n    var firstSlash = config.indexOf('/');\n    var noSlash = firstSlash === -1;\n    var portNoPath = firstColon > -1 && noSlash;\n    var portWithPath = !portNoPath && firstColon < firstSlash;\n    if (\n      (noSlash || portNoPath || portWithPath) &&\n      !startsWithProtocolRE.test(config)\n    ) {\n      config = defaultProto + '//' + config;\n    }\n    config = _.pick(url.parse(config, false, true), urlParseFields);\n    // default logic for the port is to use 9200 for the default. When a string is specified though,\n    // we will use the default from the protocol of the string.\n    if (!config.port) {\n      var proto = config.protocol || 'http';\n      if (proto.charAt(proto.length - 1) === ':') {\n        proto = proto.substring(0, proto.length - 1);\n      }\n      if (Host.defaultPorts[proto]) {\n        config.port = Host.defaultPorts[proto];\n      }\n    }\n  }\n\n  if (_.isObject(config)) {\n    // move hostname/portname to host/port semi-intelligently.\n    _.each(simplify, function(to) {\n      var from = to + 'name';\n      if (config[from] && config[to]) {\n        if (config[to].indexOf(config[from]) === 0) {\n          config[to] = config[from];\n        }\n      } else if (config[from]) {\n        config[to] = config[from];\n      }\n      delete config[from];\n    });\n  } else {\n    config = {};\n  }\n\n  if (!config.auth && globalConfig.httpAuth) {\n    config.auth = globalConfig.httpAuth;\n  }\n\n  if (config.auth) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = 'Basic ' + btoa(config.auth);\n    delete config.auth;\n  }\n\n  _.forOwn(\n    config,\n    _.bind(function(val, prop) {\n      if (val != null) this[prop] = _.clone(val);\n    }, this)\n  );\n\n  // make sure the query string is parsed\n  if (this.query === null) {\n    // majority case\n    this.query = {};\n  } else if (!_.isPlainObject(this.query)) {\n    this.query = qs.parse(this.query);\n  }\n\n  // make sure that the port is a number\n  if (utils.isNumeric(this.port)) {\n    this.port = parseInt(this.port, 10);\n  } else {\n    this.port = 9200;\n  }\n\n  // make sure the path starts with a leading slash\n  if (this.path === '/') {\n    this.path = '';\n  } else if (this.path && this.path.charAt(0) !== '/') {\n    this.path = '/' + (this.path || '');\n  }\n\n  // strip trailing ':' on the protocol (when config comes from url.parse)\n  if (this.protocol.substr(-1) === ':') {\n    this.protocol = this.protocol.substring(0, this.protocol.length - 1);\n  }\n}\n\nHost.prototype.makeUrl = function(params) {\n  params = params || {};\n  // build the port\n  var port = '';\n  if (this.port !== Host.defaultPorts[this.protocol]) {\n    // add an actual port\n    port = ':' + this.port;\n  }\n\n  // build the path\n  var path = '' + (this.path || '') + (params.path || '');\n\n  // if path doesn't start with '/' add it.\n  if (path.charAt(0) !== '/') {\n    path = '/' + path;\n  }\n\n  // build the query string\n  var query = qs.stringify(this.getQuery(params.query));\n\n  if (this.host) {\n    return (\n      this.protocol +\n      '://' +\n      this.host +\n      port +\n      path +\n      (query ? '?' + query : '')\n    );\n  } else {\n    return path + (query ? '?' + query : '');\n  }\n};\n\nfunction objectPropertyGetter(prop, preOverride) {\n  return function(overrides) {\n    if (preOverride) {\n      overrides = preOverride.call(this, overrides);\n    }\n\n    var obj = this[prop];\n    if (!obj && !overrides) {\n      return null;\n    }\n\n    if (overrides) {\n      obj = _.assign({}, obj, overrides);\n    }\n\n    return _.size(obj) ? obj : null;\n  };\n}\n\nHost.prototype.getHeaders = objectPropertyGetter('headers', function(\n  overrides\n) {\n  if (!this.suggestCompression) {\n    return overrides;\n  }\n\n  return _.defaults(overrides || {}, {\n    'Accept-Encoding': 'gzip,deflate',\n  });\n});\n\nHost.prototype.getQuery = objectPropertyGetter('query', function(query) {\n  return typeof query === 'string' ? qs.parse(query) : query;\n});\n\nHost.prototype.toString = function() {\n  return this.makeUrl();\n};\n"]},"metadata":{},"sourceType":"script"}